### Login User
### This step is always necessary
### Normally every endpoint would check:
### 1.- x-api-key = Should be the same as defined API_KEY in .env
### 2.- Authorization = This token is returned when auth/login is called successfully
### 3.- Depending on the endpoint validations on user roles [user_entity.roles] will be done 
### Note: Authorization error would return 'Invalid Authorization', this is how the FE knows
### should request user to login again
# @name login
curl --location --request GET '{{base_url}}/user/auth/login' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'username: root' \
--header 'password: {{gigabyte_root_password}}' \
@BearerToken = '{{login.response.body.$.accessToken}}'
@UserId = '{{login.response.body.$.id}}'

### User Profile Get 
curl --location --request GET '{{base_url}}/user/profile?source=WEB' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--header 'x-user-id: {{UserId}}' \

### Update User Profile
curl --location --request PUT '{{base_url}}/user/profile?source=WEB' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--header 'x-user-id: {{UserId}}' \
--data-raw '{
    "id": "{{UserId}}",
    "name": "This is my new name",
    "profile": {
        "user": "This is user metadata for WEB"
    }
}'
