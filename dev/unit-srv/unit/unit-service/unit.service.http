### Login User
### This step is always necessary
### Normally every endpoint would check:
### 1.- x-api-key = Should be the same as defined API_KEY in .env
### 2.- Authorization = This token is returned when auth/login is called successfully
### 3.- Depending on the endpoint validations on user roles [user_entity.roles] will be done 
### Note: Authorization error would return 'Invalid Authorization', this is how the FE knows
### should request user to login again
# @name login
curl --location --request GET '{{base_url}}/user/auth/login' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'username: root' \
--header 'password: {{gigabyte_root_password}}' \
@BearerToken = '{{login.response.body.$.accessToken}}'

### Unit Services Get All
curl --location --request GET '{{base_url}}/service/unit' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \

### Users Get All
# @name users
curl --location --request GET '{{base_url}}/user' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
@UserId = '{{users.response.body.$.[1].id}}'
@UserName = '{{users.response.body.$.[1].username}}'
 
### Services Get All
# @name services
curl --location --request GET '{{base_url}}/service' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
@ServiceId = '{{services.response.body.$.[0].id}}'

### Units Get All
# @name units
curl --location --request GET '{{base_url}}/unit' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
@UnitId = '{{units.response.body.$.[0].id}}'

### Login as the user
# @name login
curl --location --request GET '{{base_url}}/user/auth/login' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'username: {{UserName}}' \
--header 'password: Asdfg123!' \
@BearerToken = '{{login.response.body.$.accessToken}}'

### Create new Unit Service
# @name newUnitService
curl --location --request POST '{{base_url}}/service/unit' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'x-user-id: {{UserId}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--data-raw '{
    "user": {
        "id": "{{UserId}}"
    },
    "unit": {
        "id": "{{UnitId}}"
    },
    "service": {
        "id": "{{ServiceId}}"
    },
    "date": "{{$datetime iso8601}}",
    "odometer": 1002,
    "totalAmount": 800.50,
    "location": "24.1102578,-110.3180973",
    "assets": [{
        "source":"UnitService",
        "category":"Other",
        "orgName":"test1.jpg",
        "status":"Pending"
    }]
}'
@UnitServiceId = '{{newUnitService.response.body.$.id}}'

### Get all services as the user
curl --location --request GET '{{base_url}}/service/unit/byUser?startDate=2022-11-08T00:00:00.000Z&endDate=2023-12-08T00:00:00.000Z' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--header 'x-user-id: {{UserId}}' \

### Login as admin again to Get One or to Update the already created
# @name login
curl --location --request GET '{{base_url}}/user/auth/login' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'username: root' \
--header 'password: {{gigabyte_root_password}}' \
@BearerToken = '{{login.response.body.$.accessToken}}'

### Unit Services Get One
curl --location --request GET '{{base_url}}/service/unit/id' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--header 'x-resource-id: {{UnitServiceId}}' \

### Update created Unit Service
curl --location --request PUT '{{base_url}}/service/unit' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--data-raw '{
    "id": "{{UnitServiceId}}",
    "user": {
        "id": "{{UserId}}"
    },
    "unit": {
        "id": "{{UnitId}}"
    },
    "service": {
        "id": "{{ServiceId}}"
    },
    "date": "{{$datetime iso8601}}",
    "odometer": 50465,
    "totalAmount": 800.50,
    "location": "24.1102578,-110.3180973"
}'

### Delete created unit service
curl --location --request DELETE '{{base_url}}/service/unit' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'x-resource-id: {{UnitServiceId}}' \
--header 'Authorization: Bearer {{BearerToken}}'