### Login User
### This step is always necessary
### Normally every endpoint would check:
### 1.- x-api-key = Should be the same as defined API_KEY in .env
### 2.- Authorization = This token is returned when auth/login is called successfully
### 3.- Depending on the endpoint validations on user roles [user_entity.roles] will be done 
### Note: Authorization error would return 'Invalid Authorization', this is how the FE knows
### should request user to login again
# @name login
curl --location --request GET '{{base_url}}/user/auth/login' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'username: root' \
--header 'password: {{gigabyte_root_password}}' \
@BearerToken = '{{login.response.body.$.accessToken}}'
 
### Unit Create New
# @name unit
curl --location --request POST '{{base_url}}/unit' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--data-raw '{
    "description": "unit{{$randomInt 0 9999999}}",
    "odometer": {{$randomInt 0 100000}},
    "plate": "{{$randomInt 0 9999999}}"
}'
@UnitId = '{{unit.response.body.$.id}}'

### Update Unit Docs
# @name unitDocs
curl --location --request POST '{{base_url}}/unit/docs' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--data-raw '{
    "id": "{{UnitId}}",
     "assets": [{
        "source":"UnitDocuments",
        "category":"Other",
        "orgName":"test1.jpg",
        "status":"Pending"
    },{
        "source":"UnitDocuments",
        "category":"Other",
        "orgName":"test2.jpg",
        "status":"Pending"
    }]
}'
@UnitId = '{{unit.response.body.$.id}}'

### Get Unit Docs
# @name unitDocs
curl --location --request GET '{{base_url}}/unit/docs/id' \
--header 'Content-Type: application/json' \
--header 'x-api-key: {{apiKey}}' \
--header 'Authorization: Bearer {{BearerToken}}' \
--header 'x-resource-id: {{UnitId}}' \